Option Explicit
'number of all items in the document
Dim total As Integer
'average number of items per person
Dim itemsPerPerson As Integer
'number of avg items minus rolled forward
Dim ItemsToDo As Integer
Dim check As Integer
Dim availableMuppets As Byte
Dim pt As PivotTable
Dim numOfRows As Integer

Sub AP_allocateNames()

    'load global variables
    Call var
    
    'declare object
    Dim objMuppet As Object
    
    'declare dictionary
    Dim dirMuppet As Dictionary
    
    'initialize our new dictionary
    Set dirMuppet = New Dictionary
    
    'declare temporary variable
    Dim temp As String
    
    'item id var (for dictionary)
    Dim i As String
    
    'open new allocation
    'On Error GoTo getPath
    Workbooks.Open Filename:=newAlo
    'On Error GoTo 0
    
    'select second column items
    With ActiveWorkbook.Sheets("Allocation")
        .Select
        .Range("B2", Range("B2").End(xlDown)).Select
    End With
    
    'total number of items to be allocated
    total = Selection.rows.Count
    
    With ActiveWorkbook.Sheets("Allocation")
        .Select
        .Range("C2", Range("C2").End(xlDown)).Select
    End With
    
    check = Selection.rows.Count
    
    'check if we have correct amount of items (in case there are some empty cells in column B
    If total <> check Then
    MsgBox "there are some empty cells in column B or C, please check and run macro again'"
    Exit Sub
    End If
    
    'get number of employees
    Workbooks(macroName).Activate
    Sheets(1).Cells(28, 4).Select
    
    Dim counter As Integer
    counter = 0
    
    Do Until ActiveCell.Value = ""
        'check if person's workload is not zero, and add to count if not
        If ActiveCell.Offset(0, 2) <> 0 Then
            counter = counter + 1
        End If
        ActiveCell.Offset(1, 0).Select
    Loop
    
    If counter = 0 Then
        MsgBox "please verify names and allocation values in main file"
        Exit Sub
    End If
    
    'divide total by available employees
    itemsPerPerson = Application.WorksheetFunction.RoundUp(total / counter, 0)
    MsgBox itemsPerPerson
    'set up pivot location (for rolled forward items)
    Set pt = Workbooks(newName).Sheets("Pivot").PivotTables(1)
    
    ThisWorkbook.Sheets(1).Cells(28, 4).Select
    
    'loop through the names
    Do Until ActiveCell.Value = ""
        i = "k" & ActiveCell.Value
        
        'initialize object every time! (after setting it to nothing as well)
        Set objMuppet = New employee
        
        objMuppet.Name = ActiveCell.Value
        objMuppet.Percentage = ActiveCell.Offset(0, 2).Value
        objMuppet.NotTrainedIn = ActiveCell.Offset(0, 4).Value
        On Error GoTo errH
        objMuppet.ItemsRolled = pt.GetPivotData("WCI Document ID", "NAME", objMuppet.Name).Value
        On Error GoTo 0
        
        If (objMuppet.Percentage <> 0) Then
            On Error GoTo setToZero
            objMuppet.ItemsToDo = itemsPerPerson - objMuppet.ItemsRolled
            On Error GoTo 0
        Else
            objMuppet.ItemsToDo = 0
        End If
        
        'if there is any workload allocated for given person, they will get added to dictionary
        If (objMuppet.Percentage <> 0) Then
            dirMuppet.Add i, objMuppet
        End If
        
        Set objMuppet = Nothing
        ActiveCell.Offset(1, 0).Select
        
        
    Loop
    
    'END OF OBJECT PROPERTIES CREATION -------------------------------
    
    '-------------------------ALLOCATION OF OBJECT NAMES -------------
    
    'FILTER ROWS BY OPERATING UNITS
    Application.ScreenUpdating = False
    
    Workbooks(newName).Activate
    
    
   'LOOP THROUGH VISIBLE ROWS (COLUMN H)
    
    Dim rnVisible As Range, rnCell As Range
     
    Application.ScreenUpdating = False
     
    Dim y As Integer
     
    'counter
    y = 0
    
    
    'get a way to loop through the array and insert all values in the filter
    'use allOU variable to loop through all ou's and set exceptions
    '
    MsgBox dirMuppet.Items(0).ItemsToDo
    MsgBox dirMuppet.Items(1).ItemsToDo
    
    With ActiveSheet
        
        Dim oU As Variant
        Dim filteredRows As Integer
        
            
        For Each oU In allOU
        
        .Cells.AutoFilter Field:=8, Criteria1:="#N/A"
        
        .Cells.AutoFilter Field:=1, _
        Criteria1:=Array(oU), Operator:=xlFilterValues
        
        Set rnVisible = .Range(.Range("H2"), .Range("H65536").End(xlUp))
                
                'Iterate through the visible cells in the H-column and show their addresses.
                For Each rnCell In rnVisible.SpecialCells(xlCellTypeVisible)
                    
nextPerson:
                    'if row was already allocated (rolled forward allocation) then go the the next line
                    If (Not IsError(rnCell.Value)) Then
                        GoTo skipLine
                    End If
                     'if our counter goes over number of employees, reset it
                     If (y > dirMuppet.Count - 1) Then
                        y = 0
                     End If
                     
                     'If (dirMuppet.Items(y).ItemsToDo = 0) Then
                     '   y = y + 1
                     '   GoTo nextPerson
                     'End If
                     'If (dirMuppet.Items(y).NotTrainedIn = "ind") Then
                     '   y = y + 1
                     '   GoTo nextPerson
                        
                     'End If
                     
                     'if person's allocated number is not zero, allocate next item
                     If (dirMuppet.Items(y).ItemsToDo > 0) Then
                        rnCell.Value = dirMuppet.Items(y).Name
                        dirMuppet.Items(y).ItemsToDo = dirMuppet.Items(y).ItemsToDo - 1
                     Else
                        y = y + 1
                        GoTo nextPerson
                     'if person reached limit of their allocation, increment counter and start over
                     End If
                     
                     y = y + 1
skipLine:
                Next
                
        Next
        
    End With
    
    Application.ScreenUpdating = True
    
    
   '***** ERROR HANDLER ******
    Exit Sub
errH:
    objMuppet.ItemsRolled = 0
    Resume Next
setToZero:
    objMuppet.ItemsToDo = 0
    Resume Next
End Sub


Function GetFilteredRangeBottomRow() As Long
  Dim HeaderRow As Long, LastFilterRow As Long, Addresses() As String
  On Error GoTo NoFilterOnSheet
  With ActiveSheet
    HeaderRow = .AutoFilter.Range(1).Row
    LastFilterRow = .Range(Split(.AutoFilter.Range.Address, ":")(1)).Row
    Addresses = Split(.Range((HeaderRow + 1) & ":" & LastFilterRow). _
                      SpecialCells(xlCellTypeVisible).Address, "$")
    GetFilteredRangeBottomRow = Addresses(UBound(Addresses))
  End With
NoFilterOnSheet:
End Function

